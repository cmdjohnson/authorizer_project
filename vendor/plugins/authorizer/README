Authorizer is a gem for Ruby (in conjunction with Rails 2.3) that does authorization for you on a per-object basis. What makes this gem different from e.g. declarative_authorization and cancan is they define one role for the entire application. With Authorizer, you define roles for different users on every Rails object.

Let's use a Dropbox analogy.

With Dropbox, you can choose which folder you want to share. For instance:

Al has a home folder with these subfolders in it:
 - Music (shared with Bob)
 - Pictures (shared with Casper and Bob)
 - News (shared with no-one)
 
This causes Al to have all 3 folders in his Dropbox. Bob has 2 and Casper has only 1 folder called Pictures. 

In other words, a user has access to a subset of the entire collection of folders. Bob has access to 2 of Al's folders, namely Music and Pictures. But he doesn't even see the News folder, nor can he download files from it. 

Bob's access to the two folders is both read and write, so let's call that role "admin". Al is the owner of all 3 folders and has a role called "owner". This leads to the following Roles table:

folder_name	user_name	role
Music		Al		owner
		Bob		admin
Pictures	Al		owner
		Bob		admin
		Casper		admin
News		Al		owner

Now if we would allow Bob to also access the News folder but only read from it, we could add the role called "reader" to the table:

folder_name	user_name	role
News		Bob		reader

This is exactly what Authorizer does for your Rails application.

Installation
===

 1. sudo gem install authorizer
 2. add "authorizer" to your Gemfile
 3. generate a migration for authorization objects:

script/generate migration CreateObjectRoles

Paste this code into the newly generated file:

def self.up
  create_table :object_roles do |t|
    t.string :klazz_name
    t.integer :object_reference
    t.references :user
    t.string :role
    
    t.timestamps
  end
end

def self.down
  drop_table :object_roles
end

 4. run "rake db:migrate" to migrate your database
 5. Add observers to 'config/environment.rb'

config.active_record.observers = "Authorizer::UserObserver", "Authorizer::ObjectObserver"

Usage
===

Authorize a user on an object

Authorizer::Base.authorize_user(object)

 => true/false

If you want to know if the current user is authorized on an object, use:

Authorizer::Base.user_is_authorized?(object)
 => true/false
 
Remove authorization from an object

Authorizer::Base.remove_authorization(object)
 => true/false
 
Find all objects that the current user is authorized to use

Authorizer::Base.find(:all, "Post", :conditions => { :order => "DESC" }) # [ #<Post id: 1>, #<Post id: 2> ]
Authorizer::Base.find(:first, "Post") #<Post id: 1>

If you are using inherited_resources, you can also use these filters in your controller class:

# own created objects so you can access them after creation
after_filter :own_created_object, :only => :create
# authorize entire controller
before_filter :authorize, :except => [ :create, :index, :new ]

If you're just getting started with Authorizer but you already have a running app, you can have one user own all objects with this method:

Authorizer::Admin.create_brand_new_object_roles(:user => User.first)

This method will guess what objects to use by checking for direct descendants of ActiveRecord::Base.

If you just want to do this for the Post and Category classes, use:

Authorizer::Admin.create_brand_new_object_roles(:user => User.first, :objects => [ "Post", "Category" ])

To get rid of any stale authorization objects lying around in your database, use:

Authorizer::Admin.remove_all_unused_authorization_objects

Other notes
===

Requirements:
 - Ruby (this gem was tested with 1.8.7)
 - Rails 2.3 (tested with 2.3.11)
 - Authlogic (for authentication)

Optional:
 - inherited_resources if you want to use the controller filters supplied with this gem.

Reviews, and patches are welcome!

Author: Commander Johnson email: commanderjohnson gmail com
